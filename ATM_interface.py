{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f1c0084f-d9c9-494a-bc31-d240a800a6f0",
   "metadata": {},
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "import time \n",
    "import datetime \n",
    "database = 'transactions.csv'\n",
    "try:\n",
    "    df = pd.read_csv(database)\n",
    "except pd.errors.EmptyDataError:\n",
    "    df = pd.DataFrame(columns=['Date','Transaction'])\n",
    "df.to_csv(database,index=False)\n",
    "print(\"Insert The CARD\")\n",
    "time.sleep(3)\n",
    "pwd=2007\n",
    "pin=int(input(\"enter atm pin\"))\n",
    "bal= 10000\n",
    "def display_menu():\n",
    "    print(\"ATM INTERFACE\")\n",
    "    print(\"---------------------------\")\n",
    "    print(\"1. Balance\")\n",
    "    print(\"2. Transactions history\")\n",
    "    print(\"3. Withdraw\")\n",
    "    print(\"4. Deposit\")\n",
    "    print(\"5. Transfer\")\n",
    "    print(\"6. Quit\")\n",
    "def balance():\n",
    "    print(f\"your current bal is {bal} \")\n",
    "def history():\n",
    "    global df\n",
    "    global database\n",
    "    print(f\"your current bal is {bal} \")\n",
    "def withdraw():\n",
    "    global bal\n",
    "    withdraw_amt=int(input(\"enter withdraw_amt\"))\n",
    "    if withdraw_amt<=bal:\n",
    "        bal=bal-withdraw_amt\n",
    "        print(f\"{withdraw_amt} is debited from your acc\")\n",
    "        print(f\"your current bal is {bal} \")\n",
    "    else:\n",
    "        print(\"You have not enough money\")\n",
    "def deposit():\n",
    "    global bal\n",
    "    dep_amt=int(input(\"enter dep_amt\"))\n",
    "    bal=bal+dep_amt\n",
    "    print(f\"{dep_amt} is credited to your acc\")\n",
    "    print(f\"your updated bal is {bal} \")\n",
    "while True:\n",
    "    if pin==pwd:\n",
    "        display_menu()\n",
    "        try:\n",
    "            ch = int(input(\"Enter your choice: \"))\n",
    "        except:\n",
    "            print(\"Enter correctly!\")\n",
    "        if ch == 1:\n",
    "            balance()\n",
    "        elif ch==2:\n",
    "            history()\n",
    "        elif ch==3:\n",
    "            withdraw()\n",
    "        elif ch == 4:\n",
    "            deposit()\n",
    "        elif ch== 5:\n",
    "            transfer()\n",
    "        elif ch==6:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2da6e25-e3d3-4977-8cc8-f99a88b3c37b",
   "metadata": {},
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "import time \n",
    "import datetime \n",
    "database = 'transactions.csv'\n",
    "accounts_database = 'accounts.csv'\n",
    "try:\n",
    "    df = pd.read_csv(database)\n",
    "except pd.errors.EmptyDataError:\n",
    "    df = pd.DataFrame(columns=['Date','Transaction'])\n",
    "df.to_csv(database,index=False)\n",
    "print(\"Insert The CARD\")\n",
    "time.sleep(3)\n",
    "pwd=2007\n",
    "pin=int(input(\"enter atm pin\"))\n",
    "global bal\n",
    "bal=[10000]\n",
    "def display_menu():\n",
    "    print(\"ATM INTERFACE\")\n",
    "    print(\"---------------------------\")\n",
    "    print(\"1. Balance\")\n",
    "    \n",
    "    print(\"2. Transactions history\")\n",
    "    print(\"3. Withdraw\")\n",
    "    print(\"4. Deposit\")\n",
    "    print(\"5. Transfer\")\n",
    "    print(\"6. Quit\")\n",
    "def balance():\n",
    "    print(f\"your current bal is {bal} \")\n",
    "def history():\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    print(df)\n",
    "def withdraw():\n",
    "    global bal\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    withdraw_amt=int(input(\"enter withdraw_amt\"))\n",
    "    if withdraw_amt<=bal:\n",
    "        bal.append(-withdraw_amt)\n",
    "        print(f\"{withdraw_amt} is debited from your acc\")\n",
    "        print(f\"your current bal is {sum(bal)} \")\n",
    "        df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{withdraw_amt} is debited from your acc\"]})\n",
    "        df.to_csv(database,mode='a',index=False,header=False)\n",
    "    else:\n",
    "        print(\"You have not enough money\")\n",
    "def deposit():\n",
    "    global bal\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    dep_amt=int(input(\"enter dep_amt\"))\n",
    "    bal.append(dep_amt)\n",
    "    print(f\"{dep_amt} is credited to your acc\")\n",
    "    print(f\"your updated bal is {sum(bal)} \")\n",
    "    df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{dep_amt} is credited to your acc\"]})\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "def record_transaction(date, description):\n",
    "    transactions_df = pd.read_csv(transactions_database)\n",
    "    new_transaction = pd.DataFrame({\n",
    "        \"Date\": [date],\n",
    "        \"Transaction\": [description]\n",
    "    })\n",
    "    transactions_df = pd.concat([transactions_df, new_transaction], ignore_index=True)\n",
    "    transactions_df.to_csv(transactions_database, index=False)\n",
    "\n",
    "def transfer():\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    try:\n",
    "        accounts_df = pd.read_csv(accounts_database)\n",
    "    except pd.errors.EmptyDataError:\n",
    "        accounts_df = pd.DataFrame(columns=['AccountID', 'Balance'])\n",
    "    if source_account not in accounts_df['AccountID'].values:\n",
    "        print(\"Source account does not exist\")\n",
    "        return\n",
    "    if target_account not in accounts_df['AccountID'].values:\n",
    "        print(\"Target account does not exist\")\n",
    "        return\n",
    "    source_idx = accounts_df[accounts_df['AccountID'] == source_account].index[0]\n",
    "    target_idx = accounts_df[accounts_df['AccountID'] == target_account].index[0]\n",
    "    source_balance = accounts_df.at[source_idx, 'Balance']\n",
    "    target_balance = accounts_df.at[target_idx, 'Balance']\n",
    "    \n",
    "    if transfer_amt > source_balance:\n",
    "        print(\"Insufficient funds in source account\")\n",
    "        return\n",
    "    \n",
    "    accounts_df.at[source_idx, 'Balance'] -= transfer_amt\n",
    "    accounts_df.at[target_idx, 'Balance'] += transfer_amt\n",
    "    \n",
    "    accounts_df.to_csv(accounts_database, index=False)\n",
    "    record_transaction(datetime.date.today(), f\"{transfer_amt} transferred from {source_account} to {target_account}\")\n",
    "    print(f\"Successfully transferred {transfer_amt} from account {source_account} to {target_account}\")\n",
    "    df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{dep_amt} is credited to your acc\"]})\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "\n",
    "while True:\n",
    "    if pin==pwd:\n",
    "        display_menu()\n",
    "        try:\n",
    "            ch = int(input(\"Enter your choice: \"))\n",
    "        except:\n",
    "            print(\"Enter correctly!\")\n",
    "        if ch == 1:\n",
    "            balance()\n",
    "        elif ch==2:\n",
    "            history()\n",
    "        elif ch==3:\n",
    "            withdraw()\n",
    "        elif ch == 4:\n",
    "            deposit()\n",
    "        elif ch== 5:\n",
    "            transfer()\n",
    "        elif ch==6:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d327e996-a069-4804-a7df-4c06133234d0",
   "metadata": {},
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "import time \n",
    "import datetime \n",
    "database = 'transactions.csv'\n",
    "accounts_database = 'accounts.csv'\n",
    "try:\n",
    "    df = pd.read_csv(database)\n",
    "except pd.errors.EmptyDataError:\n",
    "    df = pd.DataFrame(columns=['Date','Transaction'])\n",
    "df.to_csv(database,index=False)\n",
    "print(\"Insert The CARD\")\n",
    "time.sleep(3)\n",
    "pwd=2007\n",
    "pin=int(input(\"enter atm pin\"))\n",
    "bal=[10000]\n",
    "def display_menu():\n",
    "    print(\"ATM INTERFACE\")\n",
    "    print(\"---------------------------\")\n",
    "    print(\"1. Balance\")\n",
    "    \n",
    "    print(\"2. Transactions history\")\n",
    "    print(\"3. Withdraw\")\n",
    "    print(\"4. Deposit\")\n",
    "    print(\"5. Transfer\")\n",
    "    print(\"6. Quit\")\n",
    "def balance():\n",
    "    print(f\"your current bal is {sum(bal)} \")\n",
    "def history():\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    print(df)\n",
    "def withdraw():\n",
    "    global bal\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    withdraw_amt=int(input(\"enter withdraw_amt\"))\n",
    "    if withdraw_amt<=sum(bal):\n",
    "        bal.append(-withdraw_amt)\n",
    "        print(f\"{withdraw_amt} is debited from your acc\")\n",
    "        print(f\"your current bal is {sum(bal)} \")\n",
    "        df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{withdraw_amt} is debited from your acc\"]})\n",
    "        df.to_csv(database,mode='a',index=False,header=False)\n",
    "    else:\n",
    "        print(\"You have not enough money\")\n",
    "def deposit():\n",
    "    global bal\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    dep_amt=int(input(\"enter dep_amt\"))\n",
    "    bal.append(dep_amt)\n",
    "    print(f\"{dep_amt} is credited to your acc\")\n",
    "    print(f\"your updated bal is {sum(bal)} \")\n",
    "    df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{dep_amt} is credited to your acc\"]})\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "def record_transaction(date, description):\n",
    "    transactions_df = pd.read_csv(transactions_database)\n",
    "    new_transaction = pd.DataFrame({\n",
    "        \"Date\": [date],\n",
    "        \"Transaction\": [description]\n",
    "    })\n",
    "    transactions_df = pd.concat([transactions_df, new_transaction], ignore_index=True)\n",
    "    transactions_df.to_csv(transactions_database, index=False)\n",
    "\n",
    "def transfer():\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    try:\n",
    "        accounts_df = pd.read_csv(accounts_database)\n",
    "    except pd.errors.EmptyDataError:\n",
    "        accounts_df = pd.DataFrame(columns=['AccountID', 'Balance'])\n",
    "    if source_account not in accounts_df['AccountID'].values:\n",
    "        print(\"Source account does not exist\")\n",
    "        return\n",
    "    if target_account not in accounts_df['AccountID'].values:\n",
    "        print(\"Target account does not exist\")\n",
    "        return\n",
    "    source_idx = accounts_df[accounts_df['AccountID'] == source_account].index[0]\n",
    "    target_idx = accounts_df[accounts_df['AccountID'] == target_account].index[0]\n",
    "    source_balance = accounts_df.at[source_idx, 'Balance']\n",
    "    target_balance = accounts_df.at[target_idx, 'Balance']\n",
    "    \n",
    "    if transfer_amt > source_balance:\n",
    "        print(\"Insufficient funds in source account\")\n",
    "        return\n",
    "    \n",
    "    accounts_df.at[source_idx, 'Balance'] -= transfer_amt\n",
    "    accounts_df.at[target_idx, 'Balance'] += transfer_amt\n",
    "    \n",
    "    accounts_df.to_csv(accounts_database, index=False)\n",
    "    record_transaction(datetime.date.today(), f\"{transfer_amt} transferred from {source_account} to {target_account}\")\n",
    "    print(f\"Successfully transferred {transfer_amt} from account {source_account} to {target_account}\")\n",
    "    df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{dep_amt} is credited to your acc\"]})\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "\n",
    "while True:\n",
    "    if pin==pwd:\n",
    "        display_menu()\n",
    "        try:\n",
    "            ch = int(input(\"Enter your choice: \"))\n",
    "        except:\n",
    "            print(\"Enter correctly!\")\n",
    "        if ch == 1:\n",
    "            balance()\n",
    "        elif ch==2:\n",
    "            history()\n",
    "        elif ch==3:\n",
    "            withdraw()\n",
    "        elif ch == 4:\n",
    "            deposit()\n",
    "        elif ch== 5:\n",
    "            transfer()\n",
    "        elif ch==6:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0814391f-f209-4c33-8237-769727246f04",
   "metadata": {},
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "import time \n",
    "import datetime \n",
    "database = 'transactions.csv'\n",
    "accounts_database = 'accounts.csv'\n",
    "try:\n",
    "    df = pd.read_csv(database)\n",
    "except pd.errors.EmptyDataError:\n",
    "    df = pd.DataFrame(columns=['Date','Transaction'])\n",
    "df.to_csv(database,index=False)\n",
    "print(\"Insert The CARD\")\n",
    "time.sleep(3)\n",
    "pwd=2007\n",
    "pin=int(input(\"enter atm pin\"))\n",
    "bal=[10000]\n",
    "def display_menu():\n",
    "    print(\"ATM INTERFACE\")\n",
    "    print(\"---------------------------\")\n",
    "    print(\"1. Balance\")\n",
    "    \n",
    "    print(\"2. Transactions history\")\n",
    "    print(\"3. Withdraw\")\n",
    "    print(\"4. Deposit\")\n",
    "    print(\"5. Transfer\")\n",
    "    print(\"6. Quit\")\n",
    "def balance():\n",
    "    print(f\"your current bal is {sum(bal)} \")\n",
    "def history():\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    print(df)\n",
    "def withdraw():\n",
    "    global bal\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    withdraw_amt=int(input(\"enter withdraw_amt\"))\n",
    "    if withdraw_amt<=sum(bal):\n",
    "        bal.append(-withdraw_amt)\n",
    "        print(f\"{withdraw_amt} is debited from your acc\")\n",
    "        print(f\"your current bal is {sum(bal)} \")\n",
    "        df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{withdraw_amt} is debited from your acc\"]})\n",
    "        df.to_csv(database,mode='a',index=False,header=False)\n",
    "    else:\n",
    "        print(\"You have not enough money\")\n",
    "def deposit():\n",
    "    global bal\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    dep_amt=int(input(\"enter dep_amt\"))\n",
    "    bal.append(dep_amt)\n",
    "    print(f\"{dep_amt} is credited to your acc\")\n",
    "    print(f\"your updated bal is {sum(bal)} \")\n",
    "    df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{dep_amt} is credited to your acc\"]})\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "def record_transaction(date, description):\n",
    "    transactions_df = pd.read_csv(transactions_database)\n",
    "    new_transaction = pd.DataFrame({\n",
    "        \"Date\": [date],\n",
    "        \"Transaction\": [description]\n",
    "    })\n",
    "    transactions_df = pd.concat([transactions_df, new_transaction], ignore_index=True)\n",
    "    transactions_df.to_csv(transactions_database, index=False)\n",
    "\n",
    "def transfer():\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    try:\n",
    "        accounts_df = pd.read_csv(accounts_database)\n",
    "    except pd.errors.EmptyDataError:\n",
    "        accounts_df = pd.DataFrame(columns=['AccountID', 'Balance'])\n",
    "    if source_account not in accounts_df['AccountID'].values:\n",
    "        print(\"Source account does not exist\")\n",
    "        return\n",
    "    if target_account not in accounts_df['AccountID'].values:\n",
    "        print(\"Target account does not exist\")\n",
    "        return\n",
    "    source_idx = accounts_df[accounts_df['AccountID'] == source_account].index[0]\n",
    "    target_idx = accounts_df[accounts_df['AccountID'] == target_account].index[0]\n",
    "    source_balance = accounts_df.at[source_idx, 'Balance']\n",
    "    target_balance = accounts_df.at[target_idx, 'Balance']\n",
    "    \n",
    "    if transfer_amt > source_balance:\n",
    "        print(\"Insufficient funds in source account\")\n",
    "        return\n",
    "    \n",
    "    accounts_df.at[source_idx, 'Balance'] -= transfer_amt\n",
    "    accounts_df.at[target_idx, 'Balance'] += transfer_amt\n",
    "    \n",
    "    accounts_df.to_csv(accounts_database, index=False)\n",
    "    record_transaction(datetime.date.today(), f\"{transfer_amt} transferred from {source_account} to {target_account}\")\n",
    "    print(f\"Successfully transferred {transfer_amt} from account {source_account} to {target_account}\")\n",
    "    df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{dep_amt} is credited to your acc\"]})\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "\n",
    "while True:\n",
    "    if pin==pwd:\n",
    "        display_menu()\n",
    "        try:\n",
    "            ch = int(input(\"Enter your choice: \"))\n",
    "        except:\n",
    "            print(\"Enter correctly!\")\n",
    "        if ch == 1:\n",
    "            balance()\n",
    "        elif ch==2:\n",
    "            history()\n",
    "        elif ch==3:\n",
    "            withdraw()\n",
    "        elif ch == 4:\n",
    "            deposit()\n",
    "        elif ch== 5:\n",
    "            transfer()\n",
    "        elif ch==6:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bf0cb9b-6b10-4eca-90fa-82ee5d4b3051",
   "metadata": {},
   "source": [
    "#### import csv\n",
    "import pandas as pd\n",
    "import time \n",
    "import datetime \n",
    "database = 'transactions.csv'\n",
    "accounts_database = 'accounts.csv'\n",
    "try:\n",
    "    df = pd.read_csv(database)\n",
    "except pd.errors.EmptyDataError:\n",
    "    df = pd.DataFrame(columns=['Date','Transaction'])\n",
    "df.to_csv(database,index=False)\n",
    "print(\"Insert The CARD\")\n",
    "time.sleep(3)\n",
    "pwd=2007\n",
    "pin=int(input(\"enter atm pin\"))\n",
    "try:\n",
    "    accounts_df = pd.read_csv(accounts_database)\n",
    "except pd.errors.EmptyDataError:\n",
    "    accounts_df = pd.DataFrame(columns=['AccountID', 'Balance'])\n",
    "account_id = input()\n",
    "if account_id not in accounts_df['AccountID'].values:\n",
    "    accounts_df = pd.DataFrame({'AccountID': [account_id], 'Balance': [10000]})\n",
    "else:\n",
    "    accounts_df = pd.DataFrame({\n",
    "    'AccountID': [101, 102],\n",
    "    'Balance': [10000, 10000]\n",
    "    })\n",
    "idx = accounts_df[accounts_df['AccountID'] == (account_id)].index[0]\n",
    "\n",
    "bal = accounts_df.loc[idx, 'Balance']\n",
    "def display_menu():\n",
    "    print(\"ATM INTERFACE\")\n",
    "    print(\"---------------------------\")\n",
    "    print(\"1. Balance\")\n",
    "    \n",
    "    print(\"2. Transactions history\")\n",
    "    print(\"3. Withdraw\")\n",
    "    print(\"4. Deposit\")\n",
    "    print(\"5. Transfer\")\n",
    "    print(\"6. Quit\")\n",
    "def balance():\n",
    "    print(f\"your current bal is {bal} \")\n",
    "def history():\n",
    "    global df\n",
    "    print(df)\n",
    "def withdraw():\n",
    "    global bal\n",
    "    global df\n",
    "    global accounts_df\n",
    "\n",
    "    withdraw_amt=int(input(\"enter withdraw_amt\"))\n",
    "    if withdraw_amt<=bal:\n",
    "        bal-=(withdraw_amt)\n",
    "        print(f\"{withdraw_amt} is debited from your acc\")\n",
    "        print(f\"your current bal is {bal} \")\n",
    "        new_transaction = pd.DataFrame({\n",
    "            \"Date\": [datetime.date.today()],\n",
    "            \"Transaction\": [f\"{withdraw_amt} debited\"]\n",
    "        })\n",
    "        df = pd.concat([df, new_transaction], ignore_index=True)\n",
    "        y=l.index(account_id)\n",
    "        accounts_df.loc[y,'Balance'] = bal\n",
    "        df.to_csv(database,mode='a',index=False,header=False)\n",
    "        accounts_df.to_csv(accounts_database,index=False)\n",
    "    else:\n",
    "        print(\"You have not enough money\")\n",
    "def deposit():\n",
    "    global bal\n",
    "    global df\n",
    "    global accounts_df\n",
    "    dep_amt=int(input(\"enter dep_amt\"))\n",
    "    bal+=(dep_amt)\n",
    "    print(f\"{dep_amt} is credited to your acc\")\n",
    "    print(f\"your updated bal is {bal} \")\n",
    "    new_transaction = pd.DataFrame({\n",
    "            \"Date\": [datetime.date.today()],\n",
    "            \"Transaction\": [f\"{dep_amt} credited\"]\n",
    "        })\n",
    "    df = pd.concat([df, new_transaction], ignore_index=True)\n",
    "    y=l.index(account_id)\n",
    "    accounts_df.loc[y,'Balance'] = bal\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "    accounts_df.to_csv(accounts_database,index=False)\n",
    "    \n",
    "def record_transaction(date, description):\n",
    "    transactions_df = pd.read_csv(transactions_database)\n",
    "    new_transaction = pd.DataFrame({\n",
    "        \"Date\": [date],\n",
    "        \"Transaction\": [description]\n",
    "    })\n",
    "    transactions_df = pd.concat([transactions_df, new_transaction], ignore_index=True)\n",
    "    transactions_df.to_csv(transactions_database, index=False)\n",
    "\n",
    "def transfer():\n",
    "    global df\n",
    "    df=pd.read_csv(database)\n",
    "    if source_account not in accounts_df['AccountID'].values:\n",
    "        print(\"Source account does not exist\")\n",
    "        return\n",
    "    if target_account not in accounts_df['AccountID'].values:\n",
    "        print(\"Target account does not exist\")\n",
    "        return\n",
    "    source_idx = accounts_df[accounts_df['AccountID'] == source_account].index[0]\n",
    "    target_idx = accounts_df[accounts_df['AccountID'] == target_account].index[0]\n",
    "    source_balance = accounts_df.at[source_idx, 'Balance']\n",
    "    target_balance = accounts_df.at[target_idx, 'Balance']\n",
    "    \n",
    "    if transfer_amt > source_balance:\n",
    "        print(\"Insufficient funds in source account\")\n",
    "        return\n",
    "    \n",
    "    accounts_df.at[source_idx, 'Balance'] -= transfer_amt\n",
    "    accounts_df.at[target_idx, 'Balance'] += transfer_amt\n",
    "    \n",
    "    accounts_df.to_csv(accounts_database, index=False)\n",
    "    record_transaction(datetime.date.today(), f\"{transfer_amt} transferred from {source_account} to {target_account}\")\n",
    "    print(f\"Successfully transferred {transfer_amt} from account {source_account} to {target_account}\")\n",
    "    df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{dep_amt} is credited to your acc\"]})\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "\n",
    "if pin==pwd:\n",
    "    while True:\n",
    "        display_menu()\n",
    "        try:\n",
    "            ch = int(input(\"Enter your choice: \"))\n",
    "        except:\n",
    "            print(\"Enter correctly!\")\n",
    "        if ch == 1:\n",
    "            balance()\n",
    "        elif ch==2:\n",
    "            history()\n",
    "        elif ch==3:\n",
    "            withdraw()\n",
    "        elif ch == 4:\n",
    "            deposit()\n",
    "        elif ch== 5:\n",
    "            transfer()\n",
    "        elif ch==6:\n",
    "            accounts_df.loc[0, 'Balance'] = bal\n",
    "            accounts_df.to_csv(accounts_database, index=False)\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice\")\n",
    "else:\n",
    "    print(\"Incorrect PIN. Access denied.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "da280361-6e17-4aed-9e28-693fcc10637c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Insert The CARD\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "enter atm pin 2007\n",
      "Enter acc Id 101\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ATM INTERFACE\n",
      "---------------------------\n",
      "1. Balance\n",
      "2. Transactions history\n",
      "3. Withdraw\n",
      "4. Deposit\n",
      "5. Transfer\n",
      "6. Quit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "your current bal is 12000 \n",
      "ATM INTERFACE\n",
      "---------------------------\n",
      "1. Balance\n",
      "2. Transactions history\n",
      "3. Withdraw\n",
      "4. Deposit\n",
      "5. Transfer\n",
      "6. Quit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Date       Transaction\n",
      "0  2024-05-05   2000 is debited\n",
      "1  2024-05-05  4000 is credited\n",
      "ATM INTERFACE\n",
      "---------------------------\n",
      "1. Balance\n",
      "2. Transactions history\n",
      "3. Withdraw\n",
      "4. Deposit\n",
      "5. Transfer\n",
      "6. Quit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  5\n",
      "Enter acc Id 103\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No account with that Id\n",
      "ATM INTERFACE\n",
      "---------------------------\n",
      "1. Balance\n",
      "2. Transactions history\n",
      "3. Withdraw\n",
      "4. Deposit\n",
      "5. Transfer\n",
      "6. Quit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  5\n",
      "Enter acc Id 102\n",
      "enter transfer_amt 2000\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Successfully transferred 2000 from account 101 to 102\n",
      "ATM INTERFACE\n",
      "---------------------------\n",
      "1. Balance\n",
      "2. Transactions history\n",
      "3. Withdraw\n",
      "4. Deposit\n",
      "5. Transfer\n",
      "6. Quit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Date                         Transaction\n",
      "0  2024-05-05                     2000 is debited\n",
      "1  2024-05-05                    4000 is credited\n",
      "2  2024-05-05  2000 is transfered from 101 to 102\n",
      "ATM INTERFACE\n",
      "---------------------------\n",
      "1. Balance\n",
      "2. Transactions history\n",
      "3. Withdraw\n",
      "4. Deposit\n",
      "5. Transfer\n",
      "6. Quit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "your current bal is 10000 \n",
      "ATM INTERFACE\n",
      "---------------------------\n",
      "1. Balance\n",
      "2. Transactions history\n",
      "3. Withdraw\n",
      "4. Deposit\n",
      "5. Transfer\n",
      "6. Quit\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your choice:  6\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "import pandas as pd\n",
    "import time \n",
    "import datetime \n",
    "database = 'transactions.csv'\n",
    "accounts_database = 'accounts.csv'\n",
    "try:\n",
    "    df = pd.read_csv(database)\n",
    "except pd.errors.EmptyDataError:\n",
    "    df = pd.DataFrame(columns=['Date','Transaction'])\n",
    "df.to_csv(database,index=False)\n",
    "print(\"Insert The CARD\")\n",
    "time.sleep(3)\n",
    "pwd=2007\n",
    "pin=int(input(\"enter atm pin\"))\n",
    "try:\n",
    "    accounts_df = pd.read_csv(accounts_database)\n",
    "except pd.errors.EmptyDataError:\n",
    "    accounts_df = pd.DataFrame(columns=['AccountID', 'Balance'])\n",
    "account_id= input(\"Enter acc\")\n",
    "l=accounts_df['AccountID'].tolist()\n",
    "if account_id not in l:\n",
    "    print(\"No account with that Id\")\n",
    "# idx = accounts_df[accounts_df['AccountID'] == (account_id)].index[0]\n",
    "idx=l.index(account_id)\n",
    "bal = accounts_df.loc[idx, 'Balance']\n",
    "def display_menu():\n",
    "    print(\"ATM INTERFACE\")\n",
    "    print(\"---------------------------\")\n",
    "    print(\"1. Balance\")\n",
    "    \n",
    "    print(\"2. Transactions history\")\n",
    "    print(\"3. Withdraw\")\n",
    "    print(\"4. Deposit\")\n",
    "    print(\"5. Transfer\")\n",
    "    print(\"6. Quit\")\n",
    "def balance():\n",
    "    print(f\"your current bal is {bal} \")\n",
    "def history():\n",
    "    global df\n",
    "    df = pd.read_csv(database)\n",
    "    print(df)\n",
    "def withdraw():\n",
    "    global bal\n",
    "    global df\n",
    "    global accounts_df\n",
    "\n",
    "    withdraw_amt=int(input(\"enter withdraw_amt\"))\n",
    "    if withdraw_amt<=bal:\n",
    "        bal-=(withdraw_amt)\n",
    "        print(f\"{withdraw_amt} is debited from your acc\")\n",
    "        print(f\"your current bal is {bal} \")\n",
    "        # new_transaction = pd.DataFrame({\n",
    "        #     \"Date\": [datetime.date.today()],\n",
    "        #     \"Transaction\": [f\"{withdraw_amt} debited\"]\n",
    "        # })\n",
    "        # df = pd.concat([df, new_transaction], ignore_index=True)\n",
    "        df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{withdraw_amt} is debited\"]})\n",
    "        accounts_df.loc[idx,['Balance']] = bal\n",
    "        df.to_csv(database,mode='a',index=False,header=False)\n",
    "        accounts_df.to_csv(accounts_database,index=False)\n",
    "    else:\n",
    "        print(\"You have not enough money\")\n",
    "def deposit():\n",
    "    global bal\n",
    "    global df\n",
    "    global accounts_df\n",
    "    dep_amt=int(input(\"enter dep_amt\"))\n",
    "    bal+=(dep_amt)\n",
    "    print(f\"{dep_amt} is credited to your acc\")\n",
    "    print(f\"your updated bal is {bal} \")\n",
    "    # new_transaction = pd.DataFrame({\n",
    "    #         \"Date\": [datetime.date.today()],\n",
    "    #         \"Transaction\": [f\"{dep_amt} credited\"]\n",
    "    #     })\n",
    "    # df = pd.concat([df, new_transaction], ignore_index=True)\n",
    "    df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{dep_amt} is credited\"]})\n",
    "    accounts_df.loc[idx,['Balance']] = bal\n",
    "    df.to_csv(database,mode='a',index=False,header=False)\n",
    "    accounts_df.to_csv(accounts_database,index=False)\n",
    "\n",
    "def transfer():\n",
    "    global bal\n",
    "    global df\n",
    "    global accounts_df\n",
    "    df=pd.read_csv(database)\n",
    "    target_id = input(\"Enter transfer sto which acc\")\n",
    "    if target_id not in l:\n",
    "        print(\"No account with that Id\")\n",
    "    else:\n",
    "        transfer_amt=int(input(\"enter transfer_amt\"))\n",
    "        bal-=(transfer_amt)\n",
    "        accounts_df.loc[idx,['Balance']] = bal\n",
    "        idx1=l.index(target_id )\n",
    "        bal1 = accounts_df.loc[idx, 'Balance']\n",
    "        bal1+=(transfer_amt)\n",
    "        accounts_df.loc[idx1,['Balance']] = bal1\n",
    "        print(f\"Successfully transferred {transfer_amt} from account {account_id} to {target_id }\")\n",
    "        df=pd.DataFrame({\"Date\":[datetime.date.today()],\"Transaction\":[f\"{transfer_amt} is transfered from {account_id} to {target_id }\"]})\n",
    "        df.to_csv(database,mode='a',index=False,header=False)\n",
    "        accounts_df.to_csv(accounts_database,index=False)\n",
    "if pin==pwd:\n",
    "    while True:\n",
    "        display_menu()\n",
    "        try:\n",
    "            ch = int(input(\"Enter your choice: \"))\n",
    "        except:\n",
    "            print(\"Enter correctly!\")\n",
    "        if ch == 1:\n",
    "            balance()\n",
    "        elif ch==2:\n",
    "            history()\n",
    "        elif ch==3:\n",
    "            withdraw()\n",
    "        elif ch == 4:\n",
    "            deposit()\n",
    "        elif ch== 5:\n",
    "            transfer()\n",
    "        elif ch==6:\n",
    "            break\n",
    "        else:\n",
    "            print(\"Invalid choice\")\n",
    "else:\n",
    "    print(\"Incorrect PIN. Access denied.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "724d5157-0a94-451b-9bfc-56fea51ff29f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc2fda9e-1516-4682-8898-aeb307d20d99",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
